eureka.instance.preferIpAddress= true
eureka.client.registerWithEureka= true
eureka.client.fetchRegistry= true
eureka.client.serviceUrl.defaultZone= http://localhost:8070/eureka

# All traces should be sent to latency analysis tool
management.tracing.sampling.probability=1.0
management.otlp.tracing.endpoint=http://localhost:9411/api/v2/spans
management.endpoints.web.exposure.include=prometheus

# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

spring.cloud.gateway.discovery.locator.enabled= true
spring.cloud.gateway.discovery.locator.lower-case-service-id= true

spring.cloud.gateway.discovery.routes.id=admin-service
spring.cloud.gateway.discovery.routes.uri=lb://admin-service
spring.cloud.gateway.discovery.routes.predicates.path=/adminservice/**
spring.cloud.gateway.discovery.routes.filters.stripPrefix=1

spring.cloud.gateway.discovery.routes.id=booking-service
spring.cloud.gateway.discovery.routes.uri=lb://booking-service
spring.cloud.gateway.discovery.routes.predicates.path=/bookingservice/**
spring.cloud.gateway.discovery.routes.filters.stripPrefix=1

spring.cloud.gateway.discovery.routes.id=inventory-service
spring.cloud.gateway.discovery.routes.uri=lb://inventory-service
spring.cloud.gateway.discovery.routes.predicates.path=/inventoryservice/**
spring.cloud.gateway.discovery.routes.filters.stripPrefix=1

spring.cloud.gateway.discovery.routes.id=payment-service
spring.cloud.gateway.discovery.routes.uri=lb://payment-service
spring.cloud.gateway.discovery.routes.predicates.path=/paymentservice/**
spring.cloud.gateway.discovery.routes.filters.stripPrefix=1
